services:
  # Aplicaci√≥n Web Principal
  aplicacion_web:
    build: ./app
    container_name: mi_aplicacion_web
    ports:
      - "8000:8000"
    environment:
      - ENTORNO=desarrollo
      - URL_BASE_DATOS=postgresql://usuario_db:clave_segura@base_datos:5432/mi_base_datos
      - URL_REDIS=redis://cache_redis:6379
      - PUERTO_APLICACION=8000
    depends_on:
      - base_datos
      - cache_redis
    volumes:
      - ./app:/app
    networks:
      - red_aplicacion
    restart: unless-stopped

  # Base de Datos PostgreSQL
  base_datos:
    image: postgres:15-alpine
    container_name: postgresql_db
    environment:
      - POSTGRES_USER=usuario_db
      - POSTGRES_PASSWORD=clave_segura
      - POSTGRES_DB=mi_base_datos
    ports:
      - "5432:5432"
    volumes:
      - datos_postgres:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - red_aplicacion
    restart: unless-stopped

  # Cache Redis
  cache_redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - datos_redis:/data
      - ./cache/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - red_aplicacion
    restart: unless-stopped

  # Nginx como Proxy Reverso
  proxy_nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - aplicacion_web
    networks:
      - red_aplicacion
    restart: unless-stopped

networks:
  red_aplicacion:
    driver: bridge

volumes:
  datos_postgres:
    driver: local
  datos_redis:
    driver: local
